#!/usr/bin/env bash

# exit if any command has a non-zero exit status 
set -euxo pipefail

# Installing homebrew
bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Create a .bash_profile, if it doesn't exist
# Temporarily add some required path and env vars there
# These will be rewriten / reloaded when we install the dotfiles
[ ! -f "~/.bash_profile" ] && touch ~/.bash_profile

# Save Homebrew’s installed location to current session and .bash_profile
BREW_PREFIX=$(brew --prefix)
echo "BREW_PREFIX=$(brew --prefix)" >> ~/.bash_profile

# Add brew env vars to current session and bash_profile
# These will also be loaded from dotfiles once we pull the bare repo
echo 'eval "$(${BREW_PREFIX}/bin/brew shellenv)"' >> ~/.bash_profile
eval "$(${BREW_PREFIX}/bin/brew shellenv)"

# ARM needs a prefix
[[ `uname -v | grep "ARM64"` != "" ]] && alias brew="arch -arm64 brew" && echo 'alias brew="arch -arm64 brew"' >> ~/.bash_profile

# check brew is properly installed
brew doctor

# Install GNU core utilities (those that come with macOS are outdated).
brew install coreutils

# Install some other useful utilities like `sponge`.
brew install moreutils

# Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.
brew install findutils

# Install GNU `sed`, overwriting the built-in `sed`.
brew install gnu-sed

# Install a modern version of Bash.
brew install bash
brew install bash-completion2

if ! fgrep -q "${BREW_PREFIX}/bin/bash" /etc/shells; then
  # Update the lists of permitted shells
  echo "${BREW_PREFIX}/bin/bash" | sudo tee -a /private/etc/shells
  echo "${BREW_PREFIX}/bin/bash" | sudo tee -a /etc/shells;
  # Switch to using brew-installed bash as default shell
  chsh -s "${BREW_PREFIX}/bin/bash";
fi;

# Install a modern version of git
brew install git

# Install ansible, we will need to to decrypt ssh keys from dotfiles
brew install ansible
brew install ansible-lint

